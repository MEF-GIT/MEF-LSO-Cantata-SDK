openapi: 3.0.1
info:
  description: "**This specification represents MEF work in progress and is subject\
    \ to change.** \nThe scope of this API  introduces the following capabilities\
    \ to the API:\n- Install order: request for new product - Change Order: change\
    \ an existing Product - Disconnect Order: disconnect an existing Product - Cancel\
    \ Order: cancellation of an inflight-order - Support for Order Notifications -\
    \ The Buyer can also retrieve a single, or set of Product Orders based upon a\
    \ specified filter.  \nFollowing feature will be introduced in next release: -\
    \ Amend Order: modification of an inflight-order\nProduct Order API uses TMF 622\
    \ v4.0.0 as template.\"\n"
  title: Product Ordering Management
  version: 1.0.0-RC
servers:
- url: https://serverRoot/mefApi/cantata/productOrderingManagement/v1/
tags:
- name: productOrder
- name: cancelProductOrder
- name: events subscription
paths:
  /productOrder:
    get:
      description: This operation list or find ProductOrder entities
      operationId: listProductOrder
      parameters:
      - description: "The unique identifier of the organization that is acting as\
          \ the a Buyer. MUST be specified in the request only when the requester\
          \ represents more than one Buyer.\nReference: MEF 57.2 (Sn 11.15)"
        in: query
        name: buyerId
        schema:
          type: string
      - description: "The unique identifier of the organization that is acting as\
          \ the Seller. MUST be specified in the request only when responding entity\
          \  represents more than one Seller.\nReference: MEF 57.2 (Sn 11.15)"
        in: query
        name: sellerId
        schema:
          type: string
      - description: The status of the order
        in: query
        name: state
        schema:
          type: string
      - description: Date when the order was created greater than
        in: query
        name: orderDate.gt
        schema:
          format: date-time
          type: string
      - description: Date when the order was created lesser than
        in: query
        name: orderDate.lt
        schema:
          format: date-time
          type: string
      - description: Effective completion date greater than
        in: query
        name: completionDate.gt
        schema:
          format: date-time
          type: string
      - description: Effective completion date lesser than
        in: query
        name: completionDate.lt
        schema:
          format: date-time
          type: string
      - description: Seller planned completion date greater than
        in: query
        name: expectedCompletionDate.gt
        schema:
          format: date-time
          type: string
      - description: Seller planned completion date lesser than
        in: query
        name: expectedCompletionDate.lt
        schema:
          format: date-time
          type: string
      - description: order cancellation date greater than
        in: query
        name: orderCancellationDate.gt
        schema:
          format: date-time
          type: string
      - description: order cancellation date lesser than
        in: query
        name: orderCancellationDate.lt
        schema:
          format: date-time
          type: string
      - description: An identifier that is used to group Orders that represent a unit
          of functionality that is important to a Buyer.
        in: query
        name: projectId
        schema:
          type: string
      - description: A number that uniquely identifies an order within the Buyer's
          enterprise.
        in: query
        name: externalId
        schema:
          type: string
      - description: Requested index for start of resources to be provided in response
          requested by client
        in: query
        name: offset
        schema:
          type: string
      - description: Requested number of resources to be provided in response requested
          by client
        in: query
        name: limit
        schema:
          type: string
      responses:
        "200":
          content:
            application/json;charset=utf-8:
              schema:
                items:
                  $ref: '#/components/schemas/MEFProductOrderSummary'
                type: array
          description: OK. (https://tools.ietf.org/html/rfc7231#section-6.3.1)
          headers:
            X-Pagination-Throttled:
              description: |
                Used to indicate that result page was throttled to maximum possible size  and there are additional results that can be fetched
              schema:
                type: boolean
            X-Total-Count:
              description: "The total number of matching items. E.g. if there are\
                \ 50 matching items in total, but the request has offset=10 and limit=10,\
                \ then the X-Total-Count is 50.\n"
              schema:
                type: integer
            X-Result-Count:
              description: The number of items included in the response
              schema:
                type: integer
        "400":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request
        "401":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error401'
          description: Unauthorized
        "403":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Forbidden
        "500":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error500'
          description: Internal Server Error
      summary: List or find ProductOrder objects
      tags:
      - productOrder
    post:
      description: This operation creates a ProductOrder entity.
      operationId: createProductOrder
      parameters:
      - description: "The unique identifier of the organization that is acting as\
          \ the a Buyer. MUST be specified in the request only when the requester\
          \ represents more than one Buyer.\nReference: MEF 57.2 (Sn 11.15)"
        in: query
        name: buyerId
        schema:
          type: string
      - description: "The unique identifier of the organization that is acting as\
          \ the Seller. MUST be specified in the request only when responding entity\
          \  represents more than one Seller.\nReference: MEF 57.2 (Sn 11.15)"
        in: query
        name: sellerId
        schema:
          type: string
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              $ref: '#/components/schemas/ProductOrder_Create'
        description: The ProductOrder to be created
        required: true
      responses:
        "201":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/ProductOrder'
          description: Created (https://tools.ietf.org/html/rfc7231#section-6.3.2)
        "400":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request
        "401":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error401'
          description: Unauthorized
        "403":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Forbidden
        "422":
          content:
            application/json;charset=utf-8:
              schema:
                items:
                  $ref: '#/components/schemas/Error422'
                type: array
          description: Unprocessable entity due to the business validation problems
        "500":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error500'
          description: Internal Server Error
      summary: Creates a ProductOrder
      tags:
      - productOrder
      x-codegen-request-body-name: productOrder
  /productOrder/{id}:
    get:
      description: This operation retrieves a ProductOrder entity. Attribute selection
        is enabled for all first level attributes.
      operationId: retrieveProductOrder
      parameters:
      - description: Identifier of the ProductOrder
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: "The unique identifier of the organization that is acting as\
          \ the a Buyer. MUST be specified in the request only when the requester\
          \ represents more than one Buyer.\nReference: MEF 57.2 (Sn 11.15)"
        in: query
        name: buyerId
        schema:
          type: string
      - description: "The unique identifier of the organization that is acting as\
          \ the Seller. MUST be specified in the request only when responding entity\
          \  represents more than one Seller.\nReference: MEF 57.2 (Sn 11.15)"
        in: query
        name: sellerId
        schema:
          type: string
      responses:
        "200":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/ProductOrder'
          description: Success
        "400":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request
        "401":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error401'
          description: Unauthorized
        "403":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Forbidden
        "404":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error404'
          description: Not Found
        "500":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error500'
          description: Internal Server Error
      summary: Retrieves a ProductOrder by ID
      tags:
      - productOrder
  /cancelProductOrder:
    get:
      description: This operation list or find CancelProductOrder entities
      operationId: listCancelProductOrder
      parameters:
      - in: query
        name: productOrderId
        schema:
          type: string
      - in: query
        name: productOrderExternalId
        schema:
          type: string
      - description: "The unique identifier of the organization that is acting as\
          \ the a Buyer. MUST be specified in the request only when the requester\
          \ represents more than one Buyer.\nReference: MEF 57.2 (Sn 11.15)"
        in: query
        name: buyerId
        schema:
          type: string
      - description: "The unique identifier of the organization that is acting as\
          \ the Seller. MUST be specified in the request only when responding entity\
          \  represents more than one Seller.\nReference: MEF 57.2 (Sn 11.15)"
        in: query
        name: sellerId
        schema:
          type: string
      responses:
        "200":
          content:
            application/json;charset=utf-8:
              schema:
                items:
                  $ref: '#/components/schemas/CancelProductOrder'
                type: array
          description: Success
          headers:
            X-Pagination-Throttled:
              description: |
                Used to indicate that result page was throttled to maximum possible size  and there are additional results that can be fetched
              schema:
                type: boolean
            X-Total-Count:
              description: "The total number of matching POQ. E.g. if there are 50\
                \ matching items in total, but the request has offset=10 and limit=10,\
                \ then the X-Total-Count is 50.\n"
              schema:
                type: integer
            X-Result-Count:
              description: The number of POQ included in the response
              schema:
                type: integer
        "400":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request
        "401":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error401'
          description: Unauthorized
        "403":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Forbidden
        "405":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error405'
          description: Method not allowed
        "500":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error500'
          description: Internal Server Error
      summary: List or find CancelProductOrder objects
      tags:
      - cancelProductOrder
    post:
      description: This operation creates a CancelProductOrder entity.
      operationId: createCancelProductOrder
      parameters:
      - description: "The unique identifier of the organization that is acting as\
          \ the a Buyer. MUST be specified in the request only when the requester\
          \ represents more than one Buyer.\nReference: MEF 57.2 (Sn 11.15)"
        in: query
        name: buyerId
        schema:
          type: string
      - description: "The unique identifier of the organization that is acting as\
          \ the Seller. MUST be specified in the request only when responding entity\
          \  represents more than one Seller.\nReference: MEF 57.2 (Sn 11.15)"
        in: query
        name: sellerId
        schema:
          type: string
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              $ref: '#/components/schemas/CancelProductOrder_Create'
        description: The CancelProductOrder to be created
        required: true
      responses:
        "201":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/CancelProductOrder'
          description: Created
        "400":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request
        "401":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error401'
          description: Unauthorized
        "403":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Forbidden
        "405":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error405'
          description: Method not allowed
        "422":
          content:
            application/json;charset=utf-8:
              schema:
                items:
                  $ref: '#/components/schemas/Error422'
                type: array
          description: Unprocessable entity due to the business validation problems
        "500":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error500'
          description: Internal Server Error
      summary: Creates a CancelProductOrder
      tags:
      - cancelProductOrder
      x-codegen-request-body-name: cancelProductOrder
  /cancelProductOrder/{id}:
    get:
      description: This operation retrieves a CancelProductOrder entity. Attribute
        selection is enabled for all first level attributes.
      operationId: retrieveCancelProductOrder
      parameters:
      - description: Identifier of the CancelProductOrder
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: "The unique identifier of the organization that is acting as\
          \ the a Buyer. MUST be specified in the request only when the requester\
          \ represents more than one Buyer.\nReference: MEF 57.2 (Sn 11.15)"
        in: query
        name: buyerId
        schema:
          type: string
      - description: "The unique identifier of the organization that is acting as\
          \ the Seller. MUST be specified in the request only when responding entity\
          \  represents more than one Seller.\nReference: MEF 57.2 (Sn 11.15)"
        in: query
        name: sellerId
        schema:
          type: string
      responses:
        "200":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/CancelProductOrder'
          description: Success
        "400":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request
        "401":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error401'
          description: Unauthorized
        "403":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Forbidden
        "404":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error404'
          description: Not Found
        "405":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error405'
          description: Method not allowed
        "500":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error500'
          description: Internal Server Error
      summary: Retrieves a CancelProductOrder by ID
      tags:
      - cancelProductOrder
  /hub:
    post:
      description: "Sets the communication endpoint address the service instance must\
        \ use to deliver information about its health state, execution state, failures\
        \ and metrics."
      operationId: registerListener
      parameters:
      - description: "The unique identifier of the organization that is acting as\
          \ the a Buyer. MUST be specified in the request only when the requester\
          \ represents more than one Buyer.\nReference: MEF 57.2 (Sn 11.15)"
        in: query
        name: buyerId
        schema:
          type: string
      - description: "The unique identifier of the organization that is acting as\
          \ the Seller. MUST be specified in the request only when responding entity\
          \  represents more than one Seller.\nReference: MEF 57.2 (Sn 11.15)"
        in: query
        name: sellerId
        schema:
          type: string
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              $ref: '#/components/schemas/EventSubscriptionInput'
        description: Data containing the callback endpoint to deliver the information
        required: true
      responses:
        "201":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/EventSubscription'
          description: Subscribed
        "400":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request
        "401":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error401'
          description: Unauthorized
        "403":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Forbidden
        "405":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error405'
          description: Method Not allowed
        "500":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error500'
          description: Internal Server Error
      summary: Register a listener
      tags:
      - events subscription
      x-codegen-request-body-name: data
  /hub/{id}:
    delete:
      description: "Resets the communication endpoint address the service instance\
        \ must use to deliver information about its health state, execution state,\
        \ failures and metrics."
      operationId: unregisterListener
      parameters:
      - description: The id of the registered listener
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: "The unique identifier of the organization that is acting as\
          \ the a Buyer. MUST be specified in the request only when the requester\
          \ represents more than one Buyer.\nReference: MEF 57.2 (Sn 11.15)"
        in: query
        name: buyerId
        schema:
          type: string
      - description: "The unique identifier of the organization that is acting as\
          \ the Seller. MUST be specified in the request only when responding entity\
          \  represents more than one Seller.\nReference: MEF 57.2 (Sn 11.15)"
        in: query
        name: sellerId
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Deleted
        "400":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad request
        "401":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error401'
          description: Unauthorized
        "403":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Forbidden
        "404":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error404'
          description: Not Found
        "405":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error405'
          description: Method not allowed
        "500":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error500'
          description: Internal Server Error
      summary: Unregister a listener
      tags:
      - events subscription
    get:
      description: This operation retrieves a hub entity. Attribute selection is enabled
        for all first level attributes.
      operationId: retrieveHub
      parameters:
      - description: Identifier of the Hub
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: "The unique identifier of the organization that is acting as\
          \ the a Buyer. MUST be specified in the request only when the requester\
          \ represents more than one Buyer.\nReference: MEF 57.2 (Sn 11.15)"
        in: query
        name: buyerId
        schema:
          type: string
      - description: "The unique identifier of the organization that is acting as\
          \ the Seller. MUST be specified in the request only when responding entity\
          \  represents more than one Seller.\nReference: MEF 57.2 (Sn 11.15)"
        in: query
        name: sellerId
        schema:
          type: string
      responses:
        "200":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/EventSubscription'
          description: Success
        "400":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request
        "401":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error401'
          description: Unauthorized
        "403":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Forbidden
        "404":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error404'
          description: Not Found
        "405":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error405'
          description: Method not allowed
        "500":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error500'
          description: Internal Server Error
      summary: Retrieves a Hub by ID
      tags:
      - events subscription
components:
  schemas:
    CancelProductOrder:
      description: Request for cancellation an existing product order
      properties:
        requestedCancellationDate:
          description: Date when the submitter wants the order to be cancelled
          format: date-time
          type: string
        cancellationReason:
          description: Reason why the order is cancelled.
          type: string
        productOrder:
          $ref: '#/components/schemas/MEFProductOrderRef'
        id:
          description: id of the cancellation request (this is not an order id)
          type: string
        href:
          description: Hyperlink to access the cancellation request
          type: string
        state:
          $ref: '#/components/schemas/TaskStateType'
        cancellationDeniedReason:
          description: If seller denied cancellation request he could here provide
            reason for this denial of the product
          type: string
        effectiveCancellationDate:
          description: Date when the order is cancelled.
          format: date-time
          type: string
      type: object
    CancelProductOrder_Create:
      description: "Request for cancellation an existing product order\nSkipped properties:\
        \ id,href,state,effectiveCancellationDate"
      properties:
        requestedCancellationDate:
          description: Date when the submitter wants the order to be cancelled
          format: date-time
          type: string
        cancellationReason:
          description: Reason why the order is cancelled.
          type: string
        productOrder:
          $ref: '#/components/schemas/MEFProductOrderRef'
      required:
      - productOrder
      type: object
    Duration:
      description: "A Duration in a given unit of time e.g. 3 hours, or 5 days."
      properties:
        amount:
          description: "Duration (number of seconds, minutes, hours, etc.)"
          type: integer
        units:
          $ref: '#/components/schemas/TimeUnit'
      required:
      - amount
      - units
      type: object
    FieldedAddress:
      allOf:
      - $ref: '#/components/schemas/RelatedPlaceRefOrValue'
      - properties:
          country:
            description: Country that the address is in
            type: string
          streetType:
            description: "The type of street (e.g., alley, avenue, boulevard, brae,\
              \ crescent, drive, highway, lane, terrace, parade, place, tarn, way,\
              \ wharf)"
            type: string
          postcodeExtension:
            description: An extension of a postal code. E.g. the part following the
              dash in a US urban property address
            type: string
          city:
            description: The city that the address is in
            type: string
          streetNr:
            description: Number identifying a specific property on a public street.
              It may be combined with streetNrLast for ranged addresses. MEF 79 defines
              it as required however as in certain countries it is not used we make
              it optional in API.
            type: string
          locality:
            description: The locality that the address is in
            type: string
          postcode:
            description: "Descriptor for a postal delivery area, used to speed and\
              \ simplify the delivery of mail (also known as zip code)"
            type: string
          streetNrLast:
            description: Last number in a range of street numbers allocated to a property
            type: string
          streetNrSuffix:
            description: The first street number suffix
            type: string
          streetName:
            description: Name of the street or other street type
            type: string
          stateOrProvince:
            description: The State or Province that the address is in
            type: string
          streetNrLastSuffix:
            description: Last street number suffix for a ranged address
            type: string
          geographicSubAddress:
            $ref: '#/components/schemas/GeographicSubAddress'
          streetSuffix:
            description: A modifier denoting a relative direction
            type: string
        required:
        - city
        - country
        - streetName
        type: object
      description: "A type of Address that has a discrete field and value for each\
        \ type of boundary or identifier down to the lowest level of detail. For example\
        \ \"street number\" is one field, \"street name\" is another field, etc. Reference:\
        \ MEF 79 (Sn 8.9.2)"
      properties: {}
    FormattedAddress:
      allOf:
      - $ref: '#/components/schemas/RelatedPlaceRefOrValue'
      - properties:
          country:
            description: Country that the address is in
            type: string
          postcodeExtension:
            description: An extension of a postal code. E.g. the part following the
              dash in an US urban property address
            type: string
          stateOrProvince:
            description: The State or Province that the address is in
            type: string
          city:
            description: The city that the address is in
            type: string
          addrLine2:
            description: The second address line in a formatted address
            type: string
          addrLine1:
            description: The first address line in a formatted address
            type: string
          locality:
            description: "An area of defined or undefined boundaries within a local\
              \ authority or other legislatively defined area, usually rural or semi-rural\
              \ in nature"
            type: string
          postcode:
            description: "Descriptor for a postal delivery area, used to speed and\
              \ simplify the delivery of mail (also known as ZIP code)"
            type: string
        required:
        - addrLine1
        - city
        - country
        type: object
      description: "A type of Address that has discrete fields for each type of boundary\
        \ or identifier with the exception of street and more specific location details,\
        \ which are combined into a maximum of two strings based on local postal addressing\
        \ conventions. Reference: MEF 79 (Sn 8.9.3)"
      properties: {}
    GeographicAddressRef:
      allOf:
      - $ref: '#/components/schemas/RelatedPlaceRefOrValue'
      - properties:
          href:
            description: |
              Hyperlink to the referenced place Hyperlink MAY be used by the Seller in responses Hyperlink MUST be ignored by the Seller in case it is provided by the Buyer in a request
            type: string
          id:
            description: Identifier of the referenced Geographic Address. This identifier
              is assigned during a successful address validation request (Cantata
              Geographic Address Management API)
            type: string
        required:
        - id
        type: object
      description: |
        A reference to a Geographic Address resource available through Cantata Address Validation API.
      properties: {}
    GeographicSiteRef:
      allOf:
      - $ref: '#/components/schemas/RelatedPlaceRefOrValue'
      - properties:
          href:
            description: |
              Hyperlink to the referenced place Hyperlink MAY be used by the Seller in responses Hyperlink MUST be ignored by the Seller in case it is provided by the Buyer in a request
            type: string
          id:
            description: Identifier of the referenced Geographic Site.
            type: string
        required:
        - id
        type: object
      description: |
        A reference to a Geographic Site resource available through Cantata Service Site API
      properties: {}
    GeographicSubAddress:
      description: "Additional fields used to specify an address, as detailed as possible."
      properties:
        buildingName:
          description: |
            Allows for identification of places that require building name  as part of addressing information
          type: string
        subUnit:
          description: "Representation of a MEFSubUnit It is used for describing subunit\
            \ within a subAddress e.g. BERTH, FLAT, PIER, SUITE, SHOP, TOWER, UNIT,\
            \ WHARF."
          items:
            $ref: '#/components/schemas/MEFSubUnit'
          type: array
        levelType:
          description: Describes level types within a building
          type: string
        levelNumber:
          description: "Used where a level type may be repeated e.g. BASEMENT 1, BASEMENT\
            \ 2"
          type: string
        privateStreetNumber:
          description: Private streets numbers internal to a private street
          type: string
        privateStreetName:
          description: '"Private streets internal to a property (e.g. a university)
            may have internal names that are not recorded by the land title office'
          type: string
      type: object
    MEFBillingAccountRefOrValue:
      description: References the billing arrangement that a buyer has with a seller
        that provides products to the customer.
      properties:
        billingContact:
          $ref: '#/components/schemas/RelatedContactInformation'
        agreementName:
          description: The name of the Agreement which is referenced for the Product
            Order Item.
          type: string
        id:
          description: Identifies the buyer�s billing account to which the recurring
            and non-recurring charges for this order or order item will be billed.
            Required if the Buyer has more than one Billing Account with the Seller
            and for all new Product Orders.
          type: string
      required:
      - id
      type: object
    MEFGeographicPoint:
      allOf:
      - $ref: '#/components/schemas/RelatedPlaceRefOrValue'
      - properties:
          spatialRef:
            description: The spatial reference system used to determine the coordinates
              (e.g. "WGS84"). The system used and the value of this field are to be
              agreed during the onboarding process.
            type: string
          x:
            description: The latitude expressed in the format specified by the `spacialRef`
            type: string
          y:
            description: The longitude expressed in the format specified by the `spacialRef`
            type: string
          z:
            description: The elevation expressed in the format specified by the `spacialRef`
            type: string
        required:
        - spatialRef
        - x
        - "y"
        type: object
      description: "A MEFGeographicPoint defines a geographic point through coordinates.\
        \ Reference: MEF 79 (Sn 8.9.5)\n"
      properties: {}
    MEFItemTerm:
      description: Item Term
      properties:
        duration:
          $ref: '#/components/schemas/Duration'
        endOfTermAction:
          $ref: '#/components/schemas/MEFEndOfTermAction'
        rollInterval:
          $ref: '#/components/schemas/Duration'
      type: object
    MEFPricingMethod:
      description: An enumeration of valid pricing methods for ordered items
      enum:
      - tariff
      - contract
      - individualCaseBasis
      - other
      properties: {}
      type: string
    MEFProductConfiguration:
      description: MEFProductConfiguration is used as an extension point for MEF specific
        product/service payload.  The `@type` attribute is used as a discriminator
      discriminator:
        mapping:
          urn:mef:lso:spec:cantata-sonata:SubscriberUni:v1.0.0:order: '#/components/schemas/SubscriberUniOrder_v1.0.0'
          urn:mef:lso:spec:cantata-sonata:EplEvc:v1.0.0:order: '#/components/schemas/EplEvcOrder_v1.0.0'
        propertyName: '@type'
      properties:
        '@type':
          description: "The name of the type, defined in the JSON schema specified\
            \  above, for the product that is the subject of the POQ Request. The\
            \ named type must be a subclass of MEFProductConfiguration."
          type: string
        '@schemaLocation':
          description: A URI to the JSON schema file that defines the Product Specification
            for the product that is the subject of the POQ Request.
          format: uri
          type: string
      required:
      - '@type'
      type: object
    MEFProductOrderItemStateType:
      description: |
        Possible values for the state of the Order Item

        The following mapping has been used between `MEFProductOrderItemStateType` and MEF
        57.2:

        | MEFProductOrderItemStateType | MEF 57.2                                |
        |----------------------------- | --------------------------------------- |
        | acknowledged                 | ACKNOWLEDGED                            |
        | rejected                     | REJECTED                                |
        | rejected.validated           | VALIDATED                               |
        | rejected.unassessed          | UNASSESSED                              |
        | pending                      | Not Present in MEF 57.2. Not to be used |
        | held                         | Not Present in MEF 57.2. Not to be used |
        | inProgress                   | IN_PROGRESS                             |
        | cancelled                    | CANCELLED                               |
        | completed                    | COMPLETED                               |
        | failed                       | FAILED                                  |
        | assessingCancellation        | ASSESSING_CANCELLATION                  |
        | pendingCancellation          | CANCELLING                              |
      enum:
      - acknowledged
      - rejected
      - rejected.validated
      - rejected.unassessed
      - pending
      - held
      - inProgress
      - cancelled
      - completed
      - failed
      - assessingCancellation
      - pendingCancellation
      properties: {}
      type: string
    MEFProductOrderItem_Common:
      description: |
        An identified part of the order. A product order is decomposed into one or more order items.
      properties:
        pricingReference:
          description: "The identifier references the previously agreed upon pricing\
            \ terms, as applicable, based on the pricingMethod (e.g. a contract id\
            \ or tariff id.)"
          type: string
        note:
          items:
            $ref: '#/components/schemas/Note'
          type: array
        product:
          $ref: '#/components/schemas/MEFProductRefOrValueForOrder'
        pricingMethod:
          $ref: '#/components/schemas/MEFPricingMethod'
        relatedContactInformation:
          description: "Contact information of an individual or organization playing\
            \ a role for this Order Item.\nThe rule for mapping a represented attribute\n\
            value to a `role` is to use the _lowerCamelCase_ pattern e.g.\n- Buyer\
            \ Order Item Contact: `role=buyerOrderItemContact`\n- Buyer Implementation\
            \ Contact: `role=buyerImplementationContact`"
          items:
            $ref: '#/components/schemas/RelatedContactInformation'
          type: array
        requestedItemTerm:
          items:
            $ref: '#/components/schemas/MEFItemTerm'
          type: array
        billingAccount:
          $ref: '#/components/schemas/MEFBillingAccountRefOrValue'
        pricingTerm:
          description: The length of the contract in months.
          type: integer
        productOrderItemRelationship:
          items:
            $ref: '#/components/schemas/OrderItemRelationship'
          type: array
        tspRestorationPriority:
          description: "Within the United States, indicates the provisioning and restoration\
            \ priority as defined under the TSP Service Vendor Handbook, The valid\
            \ values are defined in ATIS OBF document: ATIS-0404001."
          type: string
        productOfferingQualificationItem:
          $ref: '#/components/schemas/ProductOfferingQualificationItemRef'
        coordinatedAction:
          $ref: '#/components/schemas/MEFOrderItemCoordinatedAction'
        action:
          $ref: '#/components/schemas/MEFProductActionType'
        quoteItem:
          $ref: '#/components/schemas/MEFQuoteItemRef'
        endCustomerName:
          description: "The name of the End Customer, either a business name or an\
            \ individual name depending on the end customer."
          type: string
        expediteIndicator:
          description: "Indicates that expedited treatment is requested and any charges\
            \ generated in provisioning this request (e.g., additional engineering\
            \ charges or labor charges if applicable) will be accepted by the Buyer."
          type: boolean
        id:
          description: "'Identifier of the item (generally it is a sequence number\
            \ 01, 02, 03, ...)' \nMEF: A Buyer provided identifier to identify Product\
            \ Order Items and to be able to relate them to one another.\nThis is set\
            \ by the Buyer and is unique within the Product Order. Examples of Reference\
            \ Identifier could be 1, 2, 3 or A, B, C.\nThe Reference Identifier can\
            \ be reused in multiple Product Orders to identify a Product Order Item\
            \ within that Product Order."
          type: string
        requestedCompletionDate:
          description: Identifies the Buyer's desired due date (requested delivery
            date)
          format: date-time
          type: string
      required:
      - action
      - id
      type: object
    MEFProductOrderItem_Create:
      allOf:
      - $ref: '#/components/schemas/MEFProductOrderItem_Common'
      - description: |
          An identified part of the order. A product order is decomposed into one or more order items.
        properties: {}
        type: object
      properties: {}
    MEFProductOrderRef:
      description: Holds the MEF Product Order extension
      properties:
        id:
          description: Unique (within the ordering domain) identifier for the order
            that is generated by the seller when the order is initially accepted.
          type: string
        href:
          description: Hyperlink to access the order
          type: string
      required:
      - id
      type: object
    MEFProductOrderStateType:
      description: |
        Possible values for the state of the order
        The following mapping has been used between `MEFProductOrderStateType` and MEF
        57.2:

        | MEFProductOrderStateType | MEF 57.2                                |
        |------------------------- | --------------------------------------- |
        | acknowledged             | ACKNOWLEDGED                            |
        | rejected                 | REJECTED                                |
        | pending                  | Not Present in MEF 57.2. Not to be used |
        | held                     | Not Present in MEF 57.2. Not to be used |
        | inProgress               | IN_PROGRESS                             |
        | cancelled                | CANCELLED                               |
        | completed                | COMPLETED                               |
        | failed                   | FAILED                                  |
        | partial                  | PARTIAL                                 |
        | assessingCancellation    | ASSESSING_CANCELLATION                  |
        | pendingCancellation      | CANCELLING                              |
      enum:
      - acknowledged
      - rejected
      - pending
      - held
      - inProgress
      - cancelled
      - completed
      - failed
      - partial
      - assessingCancellation
      - pendingCancellation
      properties: {}
      type: string
    MEFProductRefOrValueForOrder:
      description: A product is realized as one or more service(s) and / or resource(s).
      properties:
        productOffering:
          $ref: '#/components/schemas/ProductOfferingRef'
        buyerProductId:
          description: Buyer identifier of the product
          type: string
        productConfiguration:
          $ref: '#/components/schemas/MEFProductConfiguration'
        productRelationship:
          items:
            $ref: '#/components/schemas/ProductRelationship'
          type: array
        id:
          description: Unique identifier of the product. Set by the Buyer if the Product
            Order Item Action is `modify` or `delete`.
          type: string
        href:
          description: Reference of the product
          type: string
        place:
          description: The relationships between this Product Order Item and one or
            more Places as defined in the Product Specification.
          items:
            $ref: '#/components/schemas/RelatedPlaceRefOrValue'
          type: array
      required:
      - productOffering
      type: object
    MEFQuoteItemRef:
      description: It's a Quote item that has been executed previously.
      properties:
        quoteHref:
          description: Reference of the related Quote.
          type: string
        id:
          description: Id of an Item of a Quote
          type: string
        quoteId:
          description: Unique identifier of a Quote.
          type: string
      required:
      - id
      - quoteId
      type: object
    MEFProductOrderStateChange:
      description: "Holds the State notification reasons and associated date the State\
        \ changed, populated by the server"
      properties:
        changeReason:
          description: Additional comment related to state change
          type: string
        changeDate:
          description: The date on when the state was reached
          format: date-time
          type: string
        state:
          $ref: '#/components/schemas/MEFProductOrderStateType'
      type: object
    MEFProductOrderItemStateChange:
      description: "Holds the State notification reasons and associated date the State\
        \ changed, populated by the server"
      properties:
        changeReason:
          description: Additional comment related to state change.
          type: string
        changeDate:
          description: The date on when the state was reached
          format: date-time
          type: string
        state:
          $ref: '#/components/schemas/MEFProductOrderItemStateType'
      type: object
    MEFEndOfTermAction:
      description: The action the Seller will take once the term expires.
      enum:
      - roll
      - autoDisconnect
      - autoRenew
      properties: {}
      type: string
    MEFSubUnit:
      description: Allows for sub unit identification
      properties:
        subUnitNumber:
          description: "The discriminator used for the subunit, often just a simple\
            \ number but may also be a range."
          type: string
        subUnitType:
          description: "The type of subunit e.g.BERTH, FLAT, PIER, SUITE, SHOP, TOWER,\
            \ UNIT, WHARF."
          type: string
      required:
      - subUnitNumber
      - subUnitType
      type: object
    Money:
      description: A base / value business entity used to represent money
      properties:
        unit:
          description: Currency (ISO4217 norm uses 3 letters to define the currency)
          type: string
        value:
          description: A positive floating point number
          format: float
          type: number
      type: object
    Note:
      description: Extra information about a given entity
      properties:
        date:
          description: Date of the note
          format: date-time
          type: string
        author:
          description: Author of the note
          type: string
        id:
          description: "Identifier of the note within its containing entity (may or\
            \ may not be globally unique, depending on provider implementation)"
          type: string
        source:
          $ref: '#/components/schemas/NoteSourceType'
        text:
          description: Text of the note
          type: string
      required:
      - author
      - date
      - id
      - source
      - text
      type: object
    NoteSourceType:
      description: Indicates if the note is from Buyer or Seller.
      enum:
      - buyer
      - seller
      properties: {}
      type: string
    MEFProductActionType:
      description: |
        Action to be performed on the Product that the Order Item refers to.

        | ProductActionType | MEF 57.2   |
        |------------------ | ---------- |
        | add               | INSTALL    |
        | modify            | CHANGE     |
        | delete            | DISCONNECT |
      enum:
      - add
      - modify
      - delete
      properties: {}
      type: string
    MEFOrderItemCoordinatedAction:
      properties:
        coordinationDependency:
          $ref: '#/components/schemas/MEFOrderItemCoordinationDependencyType'
        id:
          description: Id of the coordinated Order Item (must be in the same Order).
          type: string
        coordinatedActionDelay:
          $ref: '#/components/schemas/Duration'
      required:
      - coordinatedActionDelay
      - coordinationDependency
      - id
      type: object
    OrderItemRelationship:
      properties:
        relationshipType:
          description: The type of order item relationship
          type: string
        id:
          description: Id of the related Order Item (must be in the same Order).
          type: string
      required:
      - id
      - relationshipType
      type: object
    MEFOrderItemCoordinationDependencyType:
      description: |
        Possible values of the Order Item Coordination Dependency

        | OrderItemCoordinationDependencyType | MEF 57.2         |
        |------------------------------------ | ---------------- |
        | startToStart                        | START_TO_START   |
        | startToFinish                       | START_TO_FINISH  |
        | finishToStart                       | FINISH_TO_START  |
        | finishToFinish                      | FINISH_TO_FINISH |
      enum:
      - startToStart
      - startToFinish
      - finishToStart
      - finishToFinish
      properties: {}
      type: string
    OrderPrice:
      description: "An amount, usually of money, that represents the actual price\
        \ paid by the Customer for this item or this order"
      properties:
        price:
          $ref: '#/components/schemas/Price'
        name:
          description: A short descriptive name such as "Subscription price".
          type: string
        priceType:
          description: "A category that describes the price, such as recurring, discount,\
            \ allowance, penalty, and so forth"
          type: string
        description:
          description: A narrative that explains in detail the semantics of this order
            item price.
          type: string
        recurringChargePeriod:
          description: "Could be month, week..."
          type: string
      type: object
    Price:
      description: "Provides all amounts (tax included, duty free, tax rate), used\
        \ currency and percentage to apply for Price Alteration."
      properties:
        taxRate:
          description: Tax rate
          format: float
          type: number
        taxIncludedAmount:
          $ref: '#/components/schemas/Money'
        dutyFreeAmount:
          $ref: '#/components/schemas/Money'
      type: object
    ProductOfferingQualificationItemRef:
      description: It's a productOfferingQualification item that has been executed
        previously.
      properties:
        productOfferingQualificationId:
          description: Unique identifier of a related entity.
          type: string
        alternateProductProposalId:
          description: A unique identifier for this Alternate Product Proposal assigned
            by the Seller.
          type: string
        productOfferingQualificationHref:
          description: Reference of the related entity.
          type: string
        id:
          description: Id of an item of a product offering qualification
          type: string
      required:
      - id
      - productOfferingQualificationId
      type: object
    ProductOfferingRef:
      description: "A reference to a Product Offering offered by the Seller to the\
        \ Buyer.  A Product Offering contains the commercial and technical details\
        \ of a Product sold by a particular Seller. A Product Offering defines all\
        \ of the commercial terms and, through association with a particular Product\
        \ Specification, defines all the technical attributes and behaviors of the\
        \ Product. A Product Offering may constrain the allowable set of configurable\
        \ technical attributes and/or behaviors specified in the associated Product\
        \ Specification."
      properties:
        href:
          description: |
            Hyperlink to a Product Offering in Sellers catalog. In case Seller is not providing a catalog capabilities this field is not used.  The catalog API definition is provided by the Seller to the Buyer during onboarding Hyperlink MAY be used by the Seller in responses   Hyperlink MUST be ignored by the Seller in case it is provided by the Buyer in a request
          type: string
        id:
          description: id of a Product Offering. It is assigned by the Seller. The
            Buyer and the Seller exchange information about offerings' ids during
            the onboarding process.
          type: string
      required:
      - id
      type: object
    ProductOrder:
      allOf:
      - $ref: '#/components/schemas/ProductOrder_Common'
      - description: "A Product Order is a type of order which can be used to place\
          \ an order between a customer and a service provider or between a service\
          \ provider and a partner and vice versa,"
        properties:
          pricingReference:
            description: "The identifier references the previously agreed upon pricing\
              \ terms, as applicable, based on the pricingMethod (e.g. a contract\
              \ id or tariff id."
            type: string
          cancellationReason:
            description: An optional free-form text field for the Seller to provide
              additional information regarding the reason for the cancellation.
            type: string
          completionDate:
            description: Identifies the date that all Product Order Items within the
              Order have reached a terminal state. No further action is permit-ted
              on the Product Order after this notification.
            format: date-time
            type: string
          expectedCompletionDate:
            description: "\"Expected delivery date amended by the provider. MEF: MEF:\
              \ Identifies the date\nthe Seller expects to complete the Product Order.\"\
              \n"
            format: date-time
            type: string
          stateChange:
            description: State change for the Product Order
            items:
              $ref: '#/components/schemas/MEFProductOrderStateChange'
            type: array
          id:
            description: ID created on repository side (OM system)
            type: string
          href:
            description: Hyperlink to access the order
            type: string
          orderVersion:
            description: "The version of the Product Order, assigned by the Seller"
            type: string
          state:
            $ref: '#/components/schemas/MEFProductOrderStateType'
          productOrderItem:
            items:
              $ref: '#/components/schemas/ProductOrderItem'
            minItems: 1
            type: array
          orderDate:
            description: Date when the order was created in the Seller�s system
            format: date-time
            type: string
          cancellationDate:
            description: Identifies the date the Seller cancelled the Order. Set by
              Seller when the Order is moved to the cancelled state.
            format: date-time
            type: string
        required:
        - id
        - orderDate
        - productOrderItem
        - state
        type: object
      properties: {}
    MEFProductOrderSummary:
      description: Structure to define GET without id response. A list of productOrder
        matching request criteria. Provides Product order summary view.
      properties:
        externalId:
          description: "ID given by the consumer and only understandable by him (to\
            \ facilitate his searches afterwards).\nMEF: Buyer Purchase Order Number"
          type: string
        completionDate:
          description: Identifies the date that all Product Order Items within the
            Order have reached a terminal state. No further action is permit-ted on
            the Product Order after this notification.
          format: date-time
          type: string
        id:
          description: "ID created on repository side (OM system)\nMEF: Unique identifier\
            \ for the order that is generated by the Seller when the order is initially\
            \ accepted via an API."
          type: string
        orderVersion:
          description: "The version of the Product Order, assignd by the Seller"
          type: string
        state:
          $ref: '#/components/schemas/MEFProductOrderStateType'
        orderDate:
          description: Date when the order was created
          format: date-time
          type: string
        projectId:
          description: An identifier that is used to group Orders that is important
            to the Buyer. A ProjectId can be used to relate multiple Orders together.
          type: string
        cancellationDate:
          description: Identifies the date the Seller cancelled the Order. Set by
            Seller when the Order is moved to the cancelled state.
          format: date-time
          type: string
      required:
      - id
      - orderDate
      - state
      type: object
    ProductOrder_Common:
      description: "A Product Order is a type of order which  can  be used to place\
        \ an order between a customer and a service provider or between a service\
        \ provider and a partner and vice versa,"
      properties:
        note:
          items:
            $ref: '#/components/schemas/Note'
          type: array
        relatedContactInformation:
          description: "Contact information of an individual or organization playing\
            \ a role in this context.\n(e.g. Order Contact Information: role=orderContactInformation;\n\
            Seller Contact Information: role=sellerContactInformation)\nProviding\
            \ the Order Contact Information in the request is mandatory."
          items:
            $ref: '#/components/schemas/RelatedContactInformation'
          minItems: 1
          type: array
        description:
          description: Description of the product order. It is a free text for Buyer
            purpose. The Seller is not obliged to read it.
          type: string
        externalId:
          description: An identifier for this order within the Buyer's enterprise.
          type: string
        projectId:
          description: An identifier that is used to group Orders that is important
            to the Buyer. A ProjectId can be used to relate multiple Orders together.
          type: string
      required:
      - relatedContactInformation
      type: object
    ProductOrder_Create:
      allOf:
      - $ref: '#/components/schemas/ProductOrder_Common'
      - description: "A Product Order is a type of order which  can  be used to place\
          \ an order between a customer and a service provider or between a service\
          \ provider and a partner and vice versa,\nSkipped properties: id,href,completionDate,orderDate,state,stateChange,cancellationDate,cancellationReason"
        properties:
          productOrderItem:
            items:
              $ref: '#/components/schemas/MEFProductOrderItem_Create'
            minItems: 1
            type: array
        required:
        - productOrderItem
        type: object
      properties: {}
    ProductOrderItem:
      allOf:
      - $ref: '#/components/schemas/MEFProductOrderItem_Common'
      - description: |
          An identified part of the order. A product order is decomposed into one or more order items.
        properties:
          itemTerm:
            items:
              $ref: '#/components/schemas/MEFItemTerm'
            type: array
          note:
            items:
              $ref: '#/components/schemas/Note'
            type: array
          completionDate:
            description: Identifies the date the Seller completed the Product Order
              Item.
            format: date-time
            type: string
          expectedCompletionDate:
            description: "Expected delivery date amended by the provider. MEF: Identifies\
              \ the date the Seller expects to complete the Product Order Item.\n"
            format: date-time
            type: string
          sellerItemIdentifier:
            description: A Seller provided identifier to identify the Product Order
              Items within a Product Order. This is only used when required for discussion
              between the Buyer and Seller.
            type: string
          itemPrice:
            items:
              $ref: '#/components/schemas/OrderPrice'
            type: array
          requestedItemTerm:
            items:
              $ref: '#/components/schemas/MEFItemTerm'
            type: array
          stateChange:
            description: State change for the ProductOrder Item
            items:
              $ref: '#/components/schemas/MEFProductOrderItemStateChange'
            type: array
          state:
            $ref: '#/components/schemas/MEFProductOrderItemStateType'
        type: object
      properties: {}
    ProductRelationship:
      description: "Linked products to the one instantiate, such as [bundled] if the\
        \ product is a bundle and you want to describe the bundled products inside\
        \ this bundle; [reliesOn] if the product needs another already owned product\
        \ to rely on (e.g. an option on an already owned mobile access product) [targets]\
        \ or [isTargeted] (depending on the way of expressing the link) for any other\
        \ kind of links that may be useful"
      properties:
        relationshipType:
          description: "One of the relationship types defined in the Product Specification.\
            \ For example: \"relies on\"\n"
          type: string
        id:
          description: unique identifier
          type: string
        href:
          description: Hyperlink to the product in Seller's inventory that is referenced
            Hyperlink MAY be used when providing response by the Seller Hyperlink
            MUST be ignored by the Seller in case it is provided by the Buyer in a
            request
          type: string
        groupingKey:
          description: |
            Related Product Identifier list is constructed from product ids having the same groupingKey and relationshipType.
          type: string
      required:
      - id
      - relationshipType
      type: object
    GeographicAddressIdentifier:
      allOf:
      - $ref: '#/components/schemas/RelatedPlaceRefOrValue'
      - properties:
          externalReferenceId:
            description: A reference to an address by id
            type: string
          externalReferenceType:
            description: Uniquely identifies the authority that specifies the addresses
              reference and/or its type (if the authority specifies more than one
              type of address). The value(s) to be used are to be agreed during the
              onboarding. For North American providers this would normally be CLLI
              (Common Language Location Identifier) code.
            type: string
        required:
        - externalReferenceId
        - externalReferenceType
        type: object
      description: "A unique identifier controlled by a generally accepted independent\
        \ administrative authority that specifies a fixed geographical location. \n\
        Reference: MEF 79 (Sn 8.9.4)"
      properties: {}
    RelatedContactInformation:
      description: "Contact information of an individual or organization playing a\
        \ role for\nthis Order Item. The rule for mapping a represented attribute\
        \ value to a\n`role` is to use the _lowerCamelCase_ pattern e.g. \n- Buyer\
        \ Order Item Contact: `role=buyerOrderItemContact` \n- Buyer Implementation\
        \ Contact: `role=buyerImplementationContact` \n- Buyer Technical Contact:\
        \ `role=buyerTechnicalContact`\n"
      properties:
        number:
          description: Phone number
          type: string
        emailAddress:
          description: Email address
          type: string
        role:
          description: A role the party plays in a given context.
          type: string
        postalAddress:
          $ref: '#/components/schemas/FieldedAddress'
        organization:
          description: The organization or company that the contact belongs to
          type: string
        name:
          description: Name of the contact
          type: string
        numberExtension:
          description: Phone number extension
          type: string
      required:
      - emailAddress
      - name
      - number
      - role
      type: object
    RelatedPlaceRefOrValue:
      description: Place defines the places where the products order must be done.
      discriminator:
        mapping:
          FieldedAddress: '#/components/schemas/FieldedAddress'
          FormattedAddress: '#/components/schemas/FormattedAddress'
          GeographicAddressRef: '#/components/schemas/GeographicAddressRef'
          GeographicSiteRef: '#/components/schemas/GeographicSiteRef'
          MEFGeographicPoint: '#/components/schemas/MEFGeographicPoint'
          GeographicAddressIdentifier: '#/components/schemas/GeographicAddressIdentifier'
        propertyName: '@type'
      properties:
        role:
          description: Role of this place
          type: string
        '@type':
          description: |
            This field is used as discriminator and is used between different place representations. This type might discriminate for additional related place as defined in '@schemaLocation'.
          type: string
        '@schemaLocation':
          description: A URI to a JSON-Schema file that defines additional attributes
            and relationships. May be used to define additional related place types.
            Usage of this attribute must be agreed between Buyer and Seller.
          format: uri
          type: string
      required:
      - '@type'
      - role
      type: object
    TaskStateType:
      description: Possible values for the state of a task
      enum:
      - accepted
      - terminatedWithError
      - inProgress
      - done
      properties: {}
      type: string
    TimeUnit:
      description: "Represents a unit of time.\nReference: MEF 57.2 (Sn 9.22.1)\n"
      enum:
      - calendarMonths
      - calendarDays
      - calendarHours
      - calendarMinutes
      - businessDays
      - businessHours
      - businessMinutes
      properties: {}
      type: string
    EventSubscription:
      description: The class used to register for Notifications.
      properties:
        query:
          description: "This attribute is used to define notification type. Example:\
            \ \",\"query\":�eventType = productOrderCreateEvent\"}"
          type: string
        callback:
          description: The callback being registered.
          type: string
        id:
          description: Id of the listener
          type: string
      required:
      - callback
      - id
      type: object
    EventSubscriptionInput:
      description: The class used to register for Notifications.
      properties:
        query:
          description: "This attribute is used to define notification type. Example:\
            \ \",\"query\":�eventType = productOrderCreateEvent\"}"
          type: string
        callback:
          description: The callback being registered.
          type: string
      required:
      - callback
      type: object
    Error:
      description: |
        Standard Class used to describe API response error
        Not intended to be use directly only via specialization which defines a code
      properties:
        reason:
          description: Explanation of the reason for the error which can be shown
            to a client user.
          maxLength: 255
          type: string
        message:
          description: Text that provides more details and corrective actions related
            to the error. This can be shown to a client user.
          type: string
        referenceError:
          description: URI of documentation describing the error.
          format: uri
          type: string
        status:
          description: HTTP Error code extension
          type: string
      required:
      - reason
      type: object
    Error400:
      allOf:
      - $ref: '#/components/schemas/Error'
      - properties:
          code:
            $ref: '#/components/schemas/Code'
        required:
        - code
        type: object
      description: Bad Request
      properties: {}
    Error401:
      allOf:
      - $ref: '#/components/schemas/Error'
      - properties:
          code:
            $ref: '#/components/schemas/Error401Code'
        required:
        - code
        type: object
      description: Unauthorized
      properties: {}
    Error403:
      allOf:
      - $ref: '#/components/schemas/Error'
      - properties:
          code:
            $ref: '#/components/schemas/Error403Code'
        required:
        - code
        type: object
      description: Forbidden
      properties: {}
    Error404:
      allOf:
      - $ref: '#/components/schemas/Error'
      - properties:
          code:
            description: "List of supported error codes:\n- notFound: Resource not\
              \ found"
            enum:
            - notFound
            type: string
        required:
        - code
        type: object
      description: Resource for the requested path not found
      properties: {}
    Error405:
      allOf:
      - $ref: '#/components/schemas/Error'
      - properties:
          code:
            description: "The following error code::\n- methodNotAllowed: Requested\
              \ method is not supported"
            enum:
            - methodNotAllowed
            type: string
        required:
        - code
        type: object
      description: Method not allowed. This should be used to notify that the method
        is known by the origin server but not supported.
      properties: {}
    Error422:
      allOf:
      - $ref: '#/components/schemas/Error'
      - properties:
          code:
            $ref: '#/components/schemas/Error422Code'
          propertyPath:
            description: |
              A pointer to a particular property of the payload that caused the validation issue. It is highly recommended that this property should be used.
              Defined using JavaScript Object Notation (JSON) Pointer (https://tools.ietf.org/html/rfc6901).
            type: string
        required:
        - code
        type: object
      description: Unprocessable entity due to a business validation problem. (https://tools.ietf.org/html/rfc4918#section-11.2)
      properties: {}
    Error500:
      allOf:
      - $ref: '#/components/schemas/Error'
      - properties:
          code:
            description: "List of supported error codes:\n- internalError: Internal\
              \ server error"
            enum:
            - internalError
            type: string
        required:
        - code
        type: object
      description: Internal Server Error
      properties: {}
    BwpFlow:
      description: "The Bandwidth Profile Flow, BwpFlow, object class represents the\
        \ Bandwidth Profile Flow which includes the bandwidth profile parameter CIR,\
        \ CIRmax, CBS, EIR, EIRmax, EBS, Coupling Flag, Color Mode, Envelope and Rank,\
        \ and Token Request Offset. The BwpFlow is used with Service Attributes for\
        \ CarrierEthernetOperatorUni, CarrierEthernetSubscriberUni, CarrierEthernetVuni,\
        \ as well as OVC and EVC End Points. Reference MEF 10.4 Section 12 and MEF\
        \ 26.2 Section 17."
      properties:
        eirMax:
          $ref: '#/components/schemas/InformationRate'
        envelopeRank:
          description: MEF 26.2 �17.1.2 and MEF 10.4 �12.1.2 - The rank in the envelope
            of this Bandwidth Profile Flow
          minimum: 1
          type: integer
        cirMax:
          $ref: '#/components/schemas/InformationRate'
        cbs:
          $ref: '#/components/schemas/DataSize'
        couplingFlag:
          description: MEF 26.2 �17.1.2 and MEF 10.4 �12.1.2 - The couplingFlag determines
            whether unused committed bandwidth for this Bandwidth Profile Flow is
            made available as excess bandwidth for this Bandwidth Profile Flow or
            as committed bandwidth for the next lower-ranked Bandwidth Profile Flow.
            0/FALSE means overflow green tokens are used as green tokens in the next
            lowest BWP Flow in the Envelope. 1/TRUE means they are used as yellow
            tokens for this BWP Flow.
          type: boolean
        envelopeId:
          description: MEF 26.2 �17.1.2 and MEF 10.4 �12.1.2 - The name of the envelope
            that this Bandwidth Profile Flow resides in.
          maxLength: 45
          minLength: 1
          pattern: "[ -\x7f]+"
          type: string
        tokenRequestOffset:
          description: MEF 26.2 �17.1.2 and MEF 10.4 �12.1.2 - tokenRequestOffset
            adjusts the bandwidth consumed by each Service Frame in the Bandwidth
            Profile Flow by a fixed number of octets.
          type: integer
        ebs:
          $ref: '#/components/schemas/DataSize'
        colorMode:
          $ref: '#/components/schemas/ColorMode'
        cir:
          $ref: '#/components/schemas/InformationRate'
        eir:
          $ref: '#/components/schemas/InformationRate'
      required:
      - cbs
      - cir
      - cirMax
      - colorMode
      - couplingFlag
      - ebs
      - eir
      - eirMax
      - envelopeId
      - envelopeRank
      - tokenRequestOffset
      type: object
    CosL2cp:
      description: "2-tuple {L2CP Ident, CoS Name}"
      properties:
        l2cpIdentifier:
          $ref: '#/components/schemas/L2cpProtocol'
        l2cpCosName:
          description: CoS Name String to associate with the L2CP
          type: string
      required:
      - l2cpCosName
      - l2cpIdentifier
      type: object
    ColorFromPCPMapEntry:
      properties:
        pcpValue:
          $ref: '#/components/schemas/PcpValue'
        pcpColor:
          $ref: '#/components/schemas/PcpColor'
      required:
      - pcpColor
      - pcpValue
      type: object
    UniSpecifcAttributes:
      properties:
        uniConnectorGender:
          $ref: '#/components/schemas/UniConnectorGender'
        synchronousEthernet:
          $ref: '#/components/schemas/EnabledDisabled'
        uniConnectorType:
          $ref: '#/components/schemas/UniConnectorType'
        precisionTiming:
          $ref: '#/components/schemas/EnabledDisabled'
      required:
      - precisionTiming
      - synchronousEthernet
      - uniConnectorGender
      - uniConnectorType
      type: object
    EndPointMapFormU:
      description: "The EndPointMapFormU object class represents the EVC/OVC End Point\
        \  Map Form U (U for UNI).  For OVCs it is a list of one or more CE-VLAN IDs.\
        \ For EVCs it can be either a list of one of more C-VLAN IDs, or ALL or UT/PT."
      properties:
        ovcEndPointMapFormU:
          $ref: '#/components/schemas/VlanIdListing'
        mapType:
          enum:
          - FORM_U
          type: string
      required:
      - mapType
      - ovcEndPointMapFormU
      type: object
    ConversationIdToAggregationLinkMap:
      description: "This is a 2-tuple ?x,y? where x is a Port Conversation ID (a VLAN\
        \ or range of VLANs or 0 for untagged frames) and y is a list of Link Aggregation\
        \ Links. This is used in the Port Conversation to Aggregation Link Map for\
        \ the UNI and ENNI."
      properties:
        conversationIDs:
          description: 802.1AX-2014 �6.6.2.1 - A Port Conversation ID is a VLAN ID
            (1 to 4094) or 0 to represent untagged and priority-tagged frames.
          items:
            $ref: '#/components/schemas/ConversationIdRange'
          minItems: 1
          type: array
          uniqueItems: true
        aggLinkList:
          description: 802.1AX-2014 �6.6.2.1 - An ordered list of Aggregation Link
            Numbers
          items:
            minimum: 1
            type: integer
          minItems: 1
          type: array
          uniqueItems: true
      required:
      - aggLinkList
      - conversationIDs
      type: object
    ColorFromEp:
      allOf:
      - $ref: '#/components/schemas/ColorFrom'
      - description: "The color of each Ingress Frame is determined solely from the\
          \ EVC or OVC End Point. In other words, the EP declares all frames GREEN\
          \ or all frame YELLOW"
        properties:
          epColor:
            $ref: '#/components/schemas/EpColor'
        required:
        - epColor
        - mapType
        type: object
      x-discriminator-value: ENDPOINT
    ColorFromDei:
      allOf:
      - $ref: '#/components/schemas/ColorFrom'
      - description: "This Class is referenced when the color comes from the S-tag\
          \ or C-tag DEI field. MEF 26.2 requires that DEI=0 means Green and DEI=1\
          \ means Yellow, so no map is needed."
        properties: {}
        required:
        - mapType
        type: object
      x-discriminator-value: DEI
    ColorFromPCP:
      allOf:
      - $ref: '#/components/schemas/ColorFrom'
      - description: "This Class is referenced when the color comes from the S-tag\
          \ or C-tag PCP field. Each of the 8 possible PCP values maps to a color.\
          \ If there is no tag, the frame is Green."
        properties:
          colorFromPcpMap:
            description: "This is a list of 8 Color mappings, one for each PCP value."
            items:
              $ref: '#/components/schemas/ColorFromPCPMapEntry'
            maxItems: 8
            minItems: 8
            type: array
            uniqueItems: true
        required:
        - colorFromPcpMap
        - mapType
        type: object
      x-discriminator-value: PCP
    CosDscpMapEntry:
      description: "This is a 3-tuple {ipv4list, ipv6list, cosName}"
      properties:
        ipv4List:
          $ref: '#/components/schemas/DscpValues'
        ipv6List:
          $ref: '#/components/schemas/DscpValues'
        cosName:
          type: string
      required:
      - cosName
      type: object
    UniPhysicalLink:
      allOf:
      - $ref: '#/components/schemas/CarrierEthernetPhysicalLink'
      - $ref: '#/components/schemas/UniSpecifcAttributes'
      description: "This class describes the Physical Link attributes at a UNI. It\
        \ is a 4-tuple {carrierEthernet, frequency sync enable, PTP enable, connector}.\
        \ carrierEthernet is a 2-tuple containing an id and physical link type."
      properties: {}
    InformationRate:
      description: A value and a unit of measure that specifies an Information Rate.
      properties:
        irValue:
          description: The value in the information rate. For example if the information
            rate is 70 kbps this element is 70.
          minimum: 0
          type: number
        irUnits:
          $ref: '#/components/schemas/IrUnits'
      required:
      - irUnits
      - irValue
      type: object
    EvcEgressMapEntry:
      description: "A row in the EVC Egress Map. Contains a CoSName, PCPGreen, PCPYellow,\
        \ DEIGreen, DEIYellow"
      properties:
        pcpYellow:
          $ref: '#/components/schemas/PcpValueAndDiscard'
        deiYellow:
          $ref: '#/components/schemas/DeiValueAndDiscard'
        cosName:
          type: string
        deiGreen:
          $ref: '#/components/schemas/DeiValueAndDiscard'
        pcpGreen:
          $ref: '#/components/schemas/PcpValueAndDiscard'
      required:
      - cosName
      - pcpGreen
      type: object
    VirtualFrameMap:
      description: A map for virtual frame mapping.   The absence of this attribute
        corresponds to a Service Attribute value of Not Applicable. Reference MEF
        10.4 Section 9.3 Subscriber UNI Virtual Frame Map Service Attribute.
      properties:
        vfMap:
          description: "MEF 10.4 �9.2 and �9,3 - When the value of the Subscriber\
            \ UNI Instantiation Service Attribute = Virtual, there must exist a map\
            \ that maps the set of Virtual Frames that cross the UNI to a sequence\
            \ of pairs of the form?s,t where s is a standard Ethernet frame per Clause\
            \ 3 of IEEE Std 802.3 � 2015 [5] and t is the arrival time at the UNI\
            \ for all bits in s. Since MEF 10.4 does not specify the contents or format\
            \ of this map, it is currently defined as an arbitrary length string."
          minLength: 0
          type: string
      type: object
    CarrierEthernetPhysicalLink:
      description: "A 2-tuple of the form <id, physicalLink>. The value of id is an\
        \ identifier for the physical link. The value of physicalLink is the specific\
        \ Ethernet physical layer type."
      properties:
        physicalLink:
          $ref: '#/components/schemas/PhysicalLink'
        id:
          description: An identifier for the physical link.
          maxLength: 45
          minLength: 1
          pattern: "[ -\x7f]+"
          type: string
      required:
      - id
      - physicalLink
      type: object
    Envelope:
      description: Bandwidth Profiles are organized into Envelopes. Multiple Bandwidth
        Profiles in an envelope can share bandwidth resources. Each Envelope has a
        name and a Coupling Flag for Index Zero (CF0) that indicates whether unused
        green tokens are discarded or converted to yellow tokens. All Bandwidth Profile
        Flows in the same envelope satisfy the same criterion listed in R230 of MEF
        26.2.
      properties:
        couplingFlagForIndexZero:
          description: MEF 10.4 �9.12 and MEF 26.2 �14.19 - This attribute denotes
            the coupling flag for index zero. FALSE for 0 (overflow Green tokens are
            discarded) and TRUE for 1 (overflow Green tokens can be used as Yellow
            tokens).
          type: boolean
        envelopeID:
          description: MEF 10.4 �9.12 and MEF 26.2 �14.19 - The attribute is a string
            that identifies the Envelope
          maxLength: 45
          minLength: 1
          pattern: "[ -\x7f]+"
          type: string
      required:
      - couplingFlagForIndexZero
      - envelopeID
      type: object
    DscpValues:
      description: A list of 6 bit values
      properties:
        dscpValues:
          description: A list of unique 6-bit (0-63) values
          items:
            maximum: 63
            minimum: 0
            type: integer
          minItems: 1
          type: array
          uniqueItems: true
      type: object
    CosDscpMap:
      description: This is a list of CoS to DSCP Map Entries followed by items for
        Not an IP Packet and All Other Values.
      properties:
        dscpValueCoSList:
          description: "This is a list of DSCP to CoS Map Entries: {ipv4DSCPs, ipv6DSCPs,\
            \ CoSName}"
          items:
            $ref: '#/components/schemas/CosDscpMapEntry'
          minItems: 0
          type: array
          uniqueItems: true
        notIP:
          description: This is the CoS value for packets that are not IP packets when
            CoS is determined from DSCP
          type: string
        otherIPv6:
          description: This is the CoS value for IPv6 packets with DSCP values other
            than those listed.
          type: string
        otherIPv4:
          description: This is the CoS value for IPv4 packets with DSCP values other
            than those listed.
          type: string
      required:
      - dscpValueCoSList
      - notIP
      - otherIPv4
      - otherIPv6
      type: object
    SubscriberUniOrder_v1.0.0:
      allOf:
      - $ref: '#/components/schemas/MEFProductConfiguration'
      - description: The Subscriber UNI Service Attributes values are agreed to by
          the Subscriber and the Service Provider to describe the behavior of the
          UNI. All of these Service Attributes can be modified after initial provisioning
          of the UNI except the components of the List of Physical Links and Link
          Aggregation-related attributes.
        properties:
          listOfPhyLinks:
            description: "MEF 10.4 �9.4 - The value of the Subscriber UNI List of\
              \ Physical Links Service Attribute is a list of 5-tuples of the form\
              \ <id, physicalLink, synchronousEthernet, precisionTiming, demarcConnectorType>,\
              \ with one list item for each physical link. The value of id is an identifier\
              \ for the physical link. The value of physicalLink is the specific Ethernet\
              \ physical layer type. synchronousEthernet indicates if synchronous\
              \ Ethernet is used on the physical link and has the value Enabled or\
              \ Disabled. The value of precisionTiming indicates if the Precision\
              \ Time Protocol is used on the physical link and has the value Enabled\
              \ or Disabled. The value of demarcConnectorType specifies the type of\
              \ connector used. Note that the id and the physicalLink come from the\
              \ CarrierEthernetPhysicalLink class."
            items:
              $ref: '#/components/schemas/UniPhysicalLink'
            minItems: 0
            type: array
            uniqueItems: false
          virtualFrameMap:
            description: "MEF 10.4 �9.2 and �9.3 - When the value of the Subscriber\
              \ UNI Instantiation Service Attribute = Virtual, there must exist a\
              \ map that maps the set of Virtual Frames that cross the UNI to a sequence\
              \ of pairs of the form ?s,t? where s is a standard Ethernet frame per\
              \ Clause 3 of IEEE Std 802.3 � 2015 [5] and t is the arrival time at\
              \ the UNI for all bits in s. Since MEF 10.4 does not specify the contents\
              \ or format of this map, it is currently defined as an arbitrary length\
              \ string."
            items:
              $ref: '#/components/schemas/VirtualFrameMap'
            maxItems: 1
            minItems: 0
            type: array
            uniqueItems: true
          portConversation:
            description: "MEF 10.4 �9.6 - A mapping of Port Conversation IDs (i.e.,\
              \ VLAN IDs or zero for untagged frames) to an ordered list of physical\
              \ links if there are multiple physical links in the UNI and the link\
              \ aggregation is ALL_ACTIVE."
            items:
              $ref: '#/components/schemas/ConversationIdToAggregationLinkMap'
            minItems: 0
            type: array
            uniqueItems: false
          maximumNumberOfEndPoints:
            description: MEF 10.4 �9.9 - The maximum number of OVC End Points that
              the Operator CEN can support at the UNI.
            maximum: 4094
            minimum: 1
            type: integer
          lagLinkMeg:
            $ref: '#/components/schemas/EnabledDisabled'
          l2cpAddressSet:
            $ref: '#/components/schemas/L2cpAddressSet'
          linkOAM:
            $ref: '#/components/schemas/EnabledDisabled'
          meg:
            $ref: '#/components/schemas/EnabledDisabled'
          linkAggregation:
            $ref: '#/components/schemas/LinkAggregation'
          l2cpPeering:
            $ref: '#/components/schemas/L2cpPeering'
          maximumNumberOfCtagVlanIdsPerEndPoint:
            description: MEF 10.4 �9.10 - An integer greater than or equal to 1 that
              limits the number of C-Tag VLAN IDs that can map to each EVC End Point.
            maximum: 4094
            minimum: 1
            type: integer
          tokenShare:
            $ref: '#/components/schemas/EnabledDisabled'
          maximumServiceFrameSize:
            description: MEF 10.4 �9.8 - Specifies the maximum size of Service Frames
              that can be transmitted across UNI.
            minimum: 1522
            type: integer
          envelopes:
            description: "MEF 10.4 �9.12 - The Envelopes and Envelope Coupling Flag\
              \ values to which Bandwidth Profile Flows can be mapped. Value is list\
              \ of {envelopeID, couplingFlagForIndexZero}."
            items:
              $ref: '#/components/schemas/Envelope'
            minItems: 0
            type: array
            uniqueItems: true
          instantiation:
            $ref: '#/components/schemas/Instantiation'
        required:
        - instantiation
        - l2cpAddressSet
        - l2cpPeering
        - linkAggregation
        - linkOAM
        - listOfPhyLinks
        - maximumServiceFrameSize
        - meg
        type: object
      properties: {}
      title: MEF LSO Cantata-Sonata - Carrier Ethernet Subscriber UNI (Order) Product
        Specification
      x-discriminator-value: urn:mef:lso:spec:cantata-sonata:SubscriberUni:v1.0.0:order
    CosUniPcpMapEntry:
      description: "2-tuple {PCP, CoSName} that maps a CoS Name or DISCARD to a PCP."
      properties:
        pcpVal:
          $ref: '#/components/schemas/PcpVal'
        pcpCosName:
          description: A CoS Name or DISCARD
          type: string
      required:
      - pcpCosName
      - pcpVal
      type: object
    ConversationIdRange:
      description: "A range of ConversationID (either a VLAN Id or 0 for untagged\
        \ frames)  allowing three forms: start, start ? start, and start ? end"
      properties:
        start:
          description: The starting Conversation ID of the range or the only Conversation
            ID if there is no end value
          maximum: 4094
          minimum: 0
          type: integer
        end:
          description: The final Conversation ID in the range
          maximum: 4094
          minimum: 0
          type: integer
      required:
      - start
      type: object
    BandwidthProfilePerClassOfServiceName:
      description: "This Class is used for both the Ingress Bandwidth Profile per\
        \ Class of Service Name (MEF 26.2 �16.12) and Egress Bandwidth Profile per\
        \ Egress Equivalence Class Name (MEF 26.2 �16.13) . The value is a list of\
        \ pairs of the form?x, y? where x is a Class of Service Name that is in the\
        \ value of the OVC List of Class of Service Names Service Attribute (Section\
        \ 12.12) for the OVC that associates the OVC End Point for Ingress and an\
        \ Egress Equvalence Class Name for Egress. And y, if specified, is a reference\
        \ to a Bandwidth Profile Flow. There is at most one pair in the list for each\
        \ CoS or EEC Name (Except Discard)."
      properties:
        bwpFlow:
          description: The Bandwidth Profile to be applied to all items that are in
            the specified Class of Service or Egress Equivalence Class.
          items:
            $ref: '#/components/schemas/BwpFlow'
          maxItems: 1
          minItems: 0
          type: array
          uniqueItems: true
        classOfServiceName:
          description: "MEF 26.2 �16.12 and 16.13 - For Ingress, this is the Name\
            \ of the Class of Service that this bandwidth profile flow is applied\
            \ to. This should be an item from ovc.listOfClassOfServiceNames. For Egress,\
            \ this is the Egress Equivalence Class (EEC) Name."
          type: string
      required:
      - bwpFlow
      - classOfServiceName
      type: object
    EvcEndPoint:
      description: An EVC End Point is a logical entity at a given UNI that is associated
        with a distinct set of frames passing over that UNI. The EVC End Point schema
        is included in the definitions section of the EVC schema..
      properties:
        identifier:
          description: MEF 10.4 �10.1 - The value of the EVC EP ID Service Attribute
            is a string that is used to allow the Subscriber and Service Provider
            to uniquely identify the EVC EP for operations purposes.
          maxLength: 45
          minLength: 1
          pattern: "[ -\x7f]+"
          type: string
        uni:
          $ref: '#/components/schemas/CarrierEthernetEiReference'
        subscriberMegMip:
          $ref: '#/components/schemas/SubscriberMegMip'
        egressMap:
          $ref: '#/components/schemas/EvcEgressMap'
        evcEndPointMap:
          $ref: '#/components/schemas/EndPointMapFormU'
        colorMap:
          $ref: '#/components/schemas/ColorFrom'
        ingressClassOfServiceMap:
          $ref: '#/components/schemas/CosFrom'
        ingressBandwidthProfilePerClassofServiceName:
          description: "MEF 10.4 �10.9 - The EVC EP Class of Service Name Ingress\
            \ Bandwidth Profile Service Attribute is used to limit the rate of Ingress\
            \ Service Frames with a given Class of Service Name at a UNI. The value\
            \ is non-empty list of pairs of the form ?x,y?, where x is a Class of\
            \ Service Name that is in the value of the EVC List of Class of Service\
            \ Names Service Attribute and y = BWP Flow Parameters."
          items:
            $ref: '#/components/schemas/BandwidthProfilePerClassOfServiceName'
          minItems: 1
          type: array
          uniqueItems: false
      required:
      - evcEndPointMap
      - identifier
      - ingressBandwidthProfilePerClassofServiceName
      - subscriberMegMip
      - uni
      type: object
    DeiValueAndDiscard:
      enum:
      - "0"
      - "1"
      - DISCARD
      properties: {}
      type: string
    L2cpPeering:
      description: This specifies the L2CP Protocol Identifier and the Destination
        Address in use by the protocol entity. Reference MEF 45.1 Section 8.2 L2CP
        Peering Service Attribute
      properties:
        protocolID:
          $ref: '#/components/schemas/L2cpProtocol'
        destinationAddress:
          description: The Destination MAC Address of the L2CP to be peered in the
            standard format of 6 hex bytes separated either by colon (:) or hyphen
            (-).
          pattern: "[0-9a-fA-F][0-9a-fA-F]([-][0-9a-fA-F][0-9a-fA-F]){5}"
          type: string
        linkIdList:
          description: Identifiers for the links on which the specified protocol will
            be peered. If no links are specified the protocol is peered on all links.
          items:
            type: string
          minItems: 0
          type: array
          uniqueItems: false
      required:
      - destinationAddress
      - protocolID
      type: object
    EvcEgressMap:
      description: "This map is a table with one entries for each CosName, that includes\
        \ the CoSName, a PCP value for green frames, a PCP value for yellow frames,\
        \ a DEI value for green frames and a DEI value for yellow frames. Any of the\
        \ values can be DISCARD (in which case they are all treated as DISCARD). This\
        \ table is used at the UNI for EVCs."
      properties:
        evcEgressMapEntries:
          items:
            $ref: '#/components/schemas/EvcEgressMapEntry'
          minItems: 0
          type: array
          uniqueItems: true
      required:
      - evcEgressMapEntries
      type: object
    PcpValueAndDiscard:
      enum:
      - "0"
      - "1"
      - "2"
      - "3"
      - "4"
      - "5"
      - "6"
      - "7"
      - DISCARD
      properties: {}
      type: string
    CarrierEthernetSls:
      description: |-
        Data type that represents Carrier Ethernet Service Level Specification that provides a list of Performance Metrics where each item in
         the list includes the parameters and performance objective for
         the given Performance Metric. It is associated with EVC or OVC
         and a list of SlsCosNameEntry(s). Reference MEF 10.4 Section 8.8
         EVC Service Specification Service Attribute and MEF 26.2 Section
         12.13 OVC Service Level Specification Service Attribute."
      properties: {}
      type: object
    EnabledDisabled:
      description: Enumeration to indicate Enabled/Disabled state of an attribute
      enum:
      - ENABLED
      - DISABLED
      properties: {}
      type: string
    CosFromDscp:
      allOf:
      - $ref: '#/components/schemas/CosFrom'
      - description: "Ingress CoS is specified as {F,M,P}. This is when F=DSCP. This\
          \ maps groups of DSCP values (independently for ipV4 and ipV6) to a Class\
          \ of Service. It also provides a Class of Service mapping for DSCP values\
          \ that are not specified and for frames that do not contain IP Packets."
        properties:
          map_M:
            $ref: '#/components/schemas/CosDscpMap'
          l2cp_P:
            $ref: '#/components/schemas/CosL2cp'
        required:
        - l2cp_P
        - mapType
        - map_M
        type: object
      x-discriminator-value: DSCP
    VlanIdListing:
      description: "A list of of VLAN IDs for mapping to an OVC or EVC End Point.\
        \ The <li>vlanType</li> element indicates the form of the list. If it is LIST\
        \ then the second element vlanID specifies a list of one or more VLAN IDs.\
        \ For an OVC these are CE-VLAN IDs at the UNI and S-VLAN IDs at the ENNI.\
        \ For an EVC these are C-VLAN IDs. For OVCs, LIST is the only allowed value.\
        \ <br> For EVCs the vlanType can also be ALL (meaning all C-VLAN IDs) or UT/PT\
        \ (meaning only Untagged and Priority Tagged Frames)."
      properties:
        vlanId:
          description: A list of VLAN IDs that is interpreted based on the value of
            vlanType.
          items:
            maximum: 4094
            minimum: 1
            type: integer
          maxItems: 4094
          minItems: 1
          type: array
          uniqueItems: true
        vlanType:
          $ref: '#/components/schemas/VlanType'
      required:
      - vlanType
      type: object
    DataSize:
      description: A value and a unit of measure that specifies a data size for example
        for a buffer or a burst size.
      properties:
        dataSizeUnits:
          $ref: '#/components/schemas/DataSizeUnits'
        dataSizeValue:
          description: "The value in the data size. For example, if a burst size is\
            \ 40 KBYTES, this element is 40."
          type: integer
      required:
      - dataSizeUnits
      - dataSizeValue
      type: object
    CosFromEp:
      allOf:
      - $ref: '#/components/schemas/CosFrom'
      - description: "Ingress CoS is specified as {F,M,P}. This is when F=OVC_EP or\
          \ EVC_EP as appropriate."
        properties:
          map_M:
            description: The single CoS at this EVC/OVC EP
            type: string
          l2cp_P:
            $ref: '#/components/schemas/CosL2cp'
        required:
        - l2cp_P
        - mapType
        - map_M
        type: object
      x-discriminator-value: ENDPOINT
    L2cpProtocol:
      description: Defines a L2CP protocol LLC address type or EtherType with possible
        subtype. Reference MEF 45.1 Section 8.2 L2CP Peering Service Attribute.
      properties:
        l2cpProtocolType:
          $ref: '#/components/schemas/L2cpProtocolType'
        subType:
          description: The EtherType can be modified by an optional sub-type.
          minimum: 0
          type: integer
        llcAddressOrEtherType:
          description: The EtherType value or LLC value
          minimum: 0
          type: integer
      required:
      - l2cpProtocolType
      - llcAddressOrEtherType
      type: object
    EplEvcOrder_v1.0.0:
      allOf:
      - $ref: '#/components/schemas/MEFProductConfiguration'
      - description: EVC Service Attributes control the behavior observable at and
          between External Interfaces (UNIs) to the Carrier Ethernet Network (CEN).
          The behaviors are achieved by the Subscriber and the Service Provider agreeing
          on the value for each of the Service Attributes.
        properties:
          evcEps:
            description: MEF 10.4 �10 - An array of two EVC End Points.
            items:
              $ref: '#/components/schemas/EvcEndPoint'
            maxItems: 2
            minItems: 2
            type: array
            uniqueItems: true
          listOfCosNames:
            description: MEF 10.4 �8.7 - The EVC List of Class of Service Names Service
              Attribute is used to specify all of the Class of Service Names supported
              by an EVC. The value of the EVC List of Class of Service Names Service
              Attribute is a non-empty list of Class of Service Names (which may include
              one or more of the CoS Labels defined in MEF 23.2).
            items:
              type: string
            minItems: 1
            type: array
            uniqueItems: true
          availableMegLevel:
            $ref: '#/components/schemas/AvailableMegLevel'
          carrierEthernetSls:
            description: "MEF 10.4 �8.8 - Technical details of the service level in\
              \ terms of Performance Objectives, agreed between the Service Provider\
              \ and the Subscriber or between Service Provider and the Operator as\
              \ part of the Service Level Agreement. A given SLS might contain 0,1\
              \ or more Performance Objectives for each Performance Metric."
            items:
              $ref: '#/components/schemas/CarrierEthernetSls'
            maxItems: 1
            minItems: 0
            type: array
            uniqueItems: true
          maximumFrameSize:
            description: MEF 10.4 �8.10 - Maximum size of Service frames that can
              be carried over the EVC. This must be at least 1522 (1518+C-tag).
            minimum: 1522
            type: integer
        required:
        - availableMegLevel
        - evcEps
        type: object
      properties: {}
      title: MEF LSO Cantata-Sonata - Ethernet Private Line EVC (Order) Product Specification
      x-discriminator-value: urn:mef:lso:spec:cantata-sonata:EplEvc:v1.0.0:order
    CosFromCtagPcp:
      allOf:
      - $ref: '#/components/schemas/CosFrom'
      - description: "Ingress CoS is specified as {F,M,P}. This is when F=C_TAG_PCP.\
          \ This maps each of the 8 PCP values in the C-tag to a Class of Service\
          \ Name. It also maps UNTAGGED frames to a Class of Service Name."
        properties:
          map_M:
            description: This maps each of the possible C-tag PCP values (0-7) and
              Untagged to a specific Class of Service.
            items:
              $ref: '#/components/schemas/CosUniPcpMapEntry'
            maxItems: 9
            minItems: 9
            type: array
            uniqueItems: true
          l2cp_P:
            $ref: '#/components/schemas/CosL2cp'
        required:
        - l2cp_P
        - mapType
        - map_M
        type: object
      x-discriminator-value: C_TAG_PCP
    ColorFromDscpEntry:
      properties:
        ipv6Color:
          $ref: '#/components/schemas/Ipv6Color'
        dscpList:
          description: This is a list of DSCP values
          items:
            maximum: 63
            minimum: 0
            type: integer
          minItems: 1
          type: array
          uniqueItems: true
        ipv4Color:
          $ref: '#/components/schemas/Ipv4Color'
      required:
      - dscpList
      - ipv4Color
      - ipv6Color
      type: object
    CarrierEthernetEiReference:
      properties:
        href:
          description: "A reference to an External Interface (UNI, ENNI)."
          format: uri
          type: string
      required:
      - href
      type: object
    ColorFromDSCP:
      allOf:
      - $ref: '#/components/schemas/ColorFrom'
      - description: "This Class is referenced when the color comes from the DSCP\
          \ field. Four lists are included, a list of IPv4 DSCP values that are Green,\
          \ a list of IPv4 DSCP values that are yellow, a list of IPv6 DSCP values\
          \ that are Green, a list of IPv6 DSCP values that are Yellow. Any DSCP value\
          \ that is not specified and any Frame that does not include an IP packet\
          \ is Green.."
        properties:
          colorFromDscpMap:
            items:
              $ref: '#/components/schemas/ColorFromDscpEntry'
            minItems: 1
            type: array
            uniqueItems: true
        required:
        - colorFromDscpMap
        - mapType
        type: object
      x-discriminator-value: DSCP
    Code:
      description: "List of supported error codes:\n- missingQueryParameter: Missing\
        \ query-string parameter\n- missingQueryValue: Invalid query-string parameter\
        \ value\n- invalidQuery: Invalid Query\n- invalidBody: Invalid body"
      enum:
      - missingQueryParameter
      - missingQueryValue
      - invalidQuery
      - invalidBody
      properties: {}
      type: string
    Error401Code:
      description: "List of supported error codes:\n- missingCredentials: Missing\
        \ credentials\n- invalidCredentials: Invalid OR expired credentials"
      enum:
      - missingCredentials
      - invalidCredentials
      properties: {}
      type: string
    Error403Code:
      description: "List of supported error codes:\n- accessDenied: Access denied\n\
        - forbiddenRequester: Forbidden requester\n- tooManyUsers: Too many users"
      enum:
      - accessDenied
      - forbiddenRequester
      - tooManyUsers
      properties: {}
      type: string
    Error422Code:
      description: "One of the following error codes:\n  - missingProperty: The property\
        \ the Seller has expected is not present in the payload\n  - invalidValue:\
        \ The property has an incorrect value\n  - invalidFormat: The property value\
        \ does not comply with the expected value format\n  - referenceNotFound: The\
        \ object referenced by the property cannot be identified in the Seller system\n\
        \  - unexpectedProperty: Additional property, not expected by the Seller has\
        \ been provided\n  - tooManyRecords: the number of records to be provided\
        \ in the response exceeds the Seller's threshold.\n  - otherIssue: Other problem\
        \ was identified (detailed information provided in a reason)\n"
      enum:
      - missingProperty
      - invalidValue
      - invalidFormat
      - referenceNotFound
      - unexpectedProperty
      - tooManyRecords
      - otherIssue
      properties: {}
      type: string
    ColorMode:
      description: MEF 26.2 �17.1.2 and MEF 10.4 �12.1.2 - colorMode indicates whether
        or not Service Frames for this Bandwidth Profile Flow that are identified
        as Yellow on input to the Bandwidth Profile Algorithm can be declared Green.
      enum:
      - COLOR_BLIND
      - COLOR_AWARE
      properties: {}
      type: string
    PcpValue:
      enum:
      - "0"
      - "1"
      - "2"
      - "3"
      - "4"
      - "5"
      - "6"
      - "7"
      properties: {}
      type: string
    PcpColor:
      enum:
      - GREEN
      - YELLOW
      properties: {}
      type: string
    UniConnectorGender:
      description: This indicates whether the Subscriber is presented with a SOCKET
        (common) or a PLUG (less common).
      enum:
      - SOCKET
      - PLUG
      properties: {}
      type: string
    UniConnectorType:
      description: This indicates the type of connector that is presented to the Subscriber.
      enum:
      - SC
      - LC
      - RJ45
      - FC
      - D4
      - OTHER
      properties: {}
      type: string
    EpColor:
      enum:
      - GREEN
      - YELLOW
      properties: {}
      type: string
    IrUnits:
      description: The unit of measure for the Information Rate. For example if the
        Information Rate is 70 kbps this element is kbps.
      enum:
      - BPS
      - KBPS
      - MBPS
      - GBPS
      - TBPS
      - PBPS
      - EBPS
      - ZBPS
      - YBPS
      properties: {}
      type: string
    PhysicalLink:
      description: An Ethernet physical layer
      enum:
      - 1BASE5
      - 2BASE_TL
      - 10BASE2
      - 10BASE5
      - 10BASE_F
      - 10BASE_FB
      - 10BASE_FL
      - 10BASE_FP
      - 10BASE_T
      - 10BASE_T1L
      - 10BASE_T1S
      - 10BASE_TE
      - 10BROAD36
      - 10PASS_TS
      - 100BASE_BX10
      - 100BASE_FX
      - 100BASE_LX10
      - 100BASE_T
      - 100BASE_T1
      - 100BASE_T2
      - 100BASE_T4
      - 100BASE_TX
      - 100BASE_X
      - 1000BASE_BX10
      - 1000BASE_CX
      - 1000BASE_KX
      - 1000BASE_LX
      - 1000BASE_LX10
      - 1000BASE_PX10
      - 1000BASE_PX20
      - 1000BASE_RHA
      - 1000BASE_RHB
      - 1000BASE_RHC
      - 1000BASE_SX
      - 1000BASE_T
      - 1000BASE_T1
      - 1000BASE_X
      - 2_5GBASE_KX
      - 2_5GBASE_T
      - 2_5GBASE_T1
      - 5GBASE_KR
      - 5GBASE_T
      - 5GBASE_T1
      - 10GBASE_CX4
      - 10GBASE_E
      - 10GBASE_ER
      - 10GBASE_EW
      - 10GBASE_KR
      - 10GBASE_KX4
      - 10GBASE_L
      - 10GBASE_LR
      - 10GBASE_LRM
      - 10GBASE_LW
      - 10GBASE_LX4
      - 10GBASE_R
      - 10GBASE_S
      - 10GBASE_SR
      - 10GBASE_SW
      - 10GBASE_T
      - 10GBASE_T1
      - 10GBASE_W
      - 10GBASE_X
      - 25GBASE_CR
      - 25GBASE_CR_S
      - 25GBASE_ER
      - 25GBASE_KR
      - 25GBASE_KR_S
      - 25GBASE_LR
      - 25GBASE_SR
      - 25GBASE_T
      - 40GBASE_CR4
      - 40GBASE_ER4
      - 40GBASE_FR
      - 40GBASE_KR4
      - 40GBASE_LR4
      - 40GBASE_R
      - 40GBASE_SR4
      - 40GBASE_T
      - 50GBASE_CR
      - 50GBASE_ER
      - 50GBASE_FR
      - 50GBASE_KR
      - 50GBASE_LR
      - 50GBASE_SR
      - 100GBASE_CR10
      - 100GBASE_CR2
      - 100GBASE_CR4
      - 100GBASE_DR
      - 100GBASE_ER4
      - 100GBASE_KP4
      - 100GBASE_KR2
      - 100GBASE_KR4
      - 100GBASE_LR4
      - 100GBASE_R
      - 100GBASE_SR10
      - 100GBASE_SR2
      - 100GBASE_SR4
      - 200GBASE_CR4
      - 200GBASE_DR4
      - 200GBASE_ER4
      - 200GBASE_FR4
      - 200GBASE_KR4
      - 200GBASE_LR4
      - 200GBASE_SR4
      - 400GBASE_DR4
      - 400GBASE_ER8
      - 400GBASE_FR8
      - 400GBASE_LR8
      - 400GBASE_SR16
      - 400GBASE_SR4_2
      - 400GBASE_SR8
      - OTHER
      properties: {}
      type: string
    L2cpAddressSet:
      description: MEF 10.4 �9.16 and MEF 45.1 �8.1 - L2CP Address Set Service Attribute
        is defined in MEF 45.1. CTA CEVLAN Tag Aware for VLAN-based services where
        the CE-VLAN ID is used to map a frame to a service. CTB CVLAN Tag Blind for
        Port-based services where the CE-VLAN ID not used to map a frame to a service.
        CTB2 CVLAN Tag Blind Option 2 for point-to-point Port-based services that
        support the EPL Option 2 L2CP processing.
      enum:
      - CTA
      - CTB
      - CTB2
      properties: {}
      type: string
    LinkAggregation:
      description: "MEF 10.4 �9.5 - Data type representing Link Aggregation types.\
        \ NONE-No Link Aggregation is used. 2_LINK_ACTIVE_STANDBY-The SP network uses\
        \ Link Aggregation as in either Clause 5.6.1 of IEEE Std 802.1AX-2008 [2]\
        \ or Clause 6.7.1 of IEEE Std 802.1AX-2014 with one Link Aggregation Group(LAG)\
        \ across the links supporting the UNI/ENNI such that all Service Frames are\
        \ carried on only one of the two links when both links are operational. ALL_ACTIVE-The\
        \ SP Network uses Link Aggregation as specified in Clause 5.3 of IEEE Std\
        \ 802.1AX-2014, including the use of the version 2 LACPDUs as specified in\
        \ Clause 5.3.1h of IEEE Std 802.1AZ-2014, with one Link Aggregation Group\
        \ (LAG) across the links. OTHER-The Operator/Subscriber/Service Provider agree\
        \ on another other resiliency mechanism."
      enum:
      - NONE
      - 2_LINK_ACTIVE_STANDBY
      - ALL_ACTIVE
      - OTHER
      properties: {}
      type: string
    Instantiation:
      description: "MEF 10.4 �9.2 - When the value is Physical, the UNI is implemented\
        \ using one or more instances of a standard Physical Layer. When the value\
        \ is Virtual, the physical layer is not specified."
      enum:
      - PHYSICAL
      - VIRTUAL
      properties: {}
      type: string
    PcpVal:
      description: A value 0 to 7
      enum:
      - "0"
      - "1"
      - "2"
      - "3"
      - "4"
      - "5"
      - "6"
      - "7"
      - UNTAGGED
      properties: {}
      type: string
    SubscriberMegMip:
      description: MEF 10.4 �10.13 - The value of the EVC EP Subscriber MEG MIP Service
        Attribute is either None or an integer in the range 0 � 7 that indicates the
        MEG Level of a Subscriber MEG MIP.
      enum:
      - "0"
      - "1"
      - "2"
      - "3"
      - "4"
      - "5"
      - "6"
      - "7"
      - NONE
      properties: {}
      type: string
    VlanType:
      description: An indication about how the Vlan List argument is interpreted
      enum:
      - LIST
      - ALL
      - UT/PT
      properties: {}
      type: string
    DataSizeUnits:
      description: "The unit of measure in the data size. For example, if a burst\
        \ size is 40 KBYTES, this element is KBYTES."
      enum:
      - BYTES
      - KBYTES
      - MBYTES
      - GBYTES
      - TBYTES
      - PBYTES
      - EBYTES
      - ZBYTES
      - YBYTES
      properties: {}
      type: string
    L2cpProtocolType:
      description: The protocol field to inspect to identify the L2CP.
      enum:
      - ETHERTYPE
      - LLC
      properties: {}
      type: string
    AvailableMegLevel:
      description: "MEF 10.4 �8.11 - The lowest MEG level for which SOAM Frames are\
        \ not peered or discarded by the Service Provider. If this attribute is NONE\
        \  there is no such level (that is, SOAM frames at all MEG levels may be peered\
        \ or discarded by the Service Provider). MEF 6.3 constrains it to 0-6 for\
        \ all Subscriber Ethernet Services."
      enum:
      - "0"
      - "1"
      - "2"
      - "3"
      - "4"
      - "5"
      - "6"
      - NONE
      properties: {}
      type: string
    Ipv6Color:
      enum:
      - GREEN
      - YELLOW
      properties: {}
      type: string
    Ipv4Color:
      enum:
      - GREEN
      - YELLOW
      properties: {}
      type: string
    ColorFrom:
      discriminator:
        mapping:
          ENDPOINT: '#/components/schemas/ColorFromEp'
          DEI: '#/components/schemas/ColorFromDei'
          PCP: '#/components/schemas/ColorFromPCP'
          DSCP: '#/components/schemas/ColorFromDSCP'
        propertyName: mapType
      properties:
        mapType:
          type: string
      required:
      - mapType
      type: object
    CosFrom:
      discriminator:
        mapping:
          DSCP: '#/components/schemas/CosFromDscp'
          ENDPOINT: '#/components/schemas/CosFromEp'
          C_TAG_PCP: '#/components/schemas/CosFromCtagPcp'
        propertyName: mapType
      properties:
        mapType:
          description: The Field that indicates CoS is DSCP.
          type: string
      required:
      - mapType
      type: object
